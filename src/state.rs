pub trait State {
    fn is_final(&self) -> bool;
}

Accept!(AndAcc);
Accept!(AssignAcc);
Accept!(BiggerAcc);
Accept!(BinaryAcc);
Accept!(CaretAcc);
Accept!(ColonAcc);
Accept!(CommaAcc);
Accept!(SlashAcc);
Accept!(DecimalAcc);
Accept!(DecimalDigitsAcc);
Accept!(DecimalExponentAcc);
Accept!(DecimalExponentSignedAcc);
Accept!(DotPart);
Accept!(DoubleString);
Accept!(ExclamationAcc);
Accept!(HELL);
Accept!(HexAcc);
Accept!(Identifier);
Accept!(LCurlyAcc);
Accept!(LesserAcc);
Accept!(LineTerminator);
Accept!(LRoundAcc);
Accept!(LSquareAcc);
Accept!(MinusAcc);
Accept!(MultiLineCommentAcc);
Accept!(OctalAcc);
Accept!(OrAcc);
Accept!(PercentAcc);
Accept!(PlusAcc);
Accept!(QuestionMarkAcc);
Accept!(RCurlyAcc);
Accept!(RRoundAcc);
Accept!(RSquareAcc);
Accept!(SemicolonAcc);
Accept!(SingleLineCommentAcc);
Accept!(SingleString);
Accept!(StarAcc);
Accept!(TildeAcc);
Accept!(WhiteSpace);
Accept!(Template);

State!(Tilde);
State!(Semicolon);
State!(And);
State!(Assign);
State!(Bigger);
State!(Binary);
State!(Caret);
State!(Colon);
State!(Comma);
State!(Slash);
State!(LRound);
State!(RRound);
State!(RSquare);
State!(LSquare);
State!(LCurly);
State!(RCurly);
State!(Decimal);
State!(DecimalDigits);
State!(DecimalExponent);
State!(DecimalExponentSigned);
State!(Exclamation);
State!(Hex);
State!(InputElementDiv);
State!(Lesser);
State!(Minus);
State!(MultiLineComment);
State!(MultiLineCommentStar);
State!(Octal);
State!(Or);
State!(Percent);
State!(QuestionMark);
State!(Plus);
State!(SawZero);
State!(SingleLineComment);
State!(Star);
